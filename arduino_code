#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <Button.h>

//temperature monitor
#define DHTPIN D7
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

//WiFi info
const char* ssid     = "ssid";
const char* password = "password";

//MQTT info
const char* mqtt_server = "mqtt_server.example.org";
WiFiClient espClient;
PubSubClient client(espClient);

//Assign pins to relays and buttons
int wallFan = D3;  
int wallCompressor = D4; 
int buildingFan = D1; 
int buildingCompressor = D2;
int ledIndicator = D0;
Button startButton = Button(D6,PULLDOWN);
Button stopButton = Button(D5,PULLDOWN);

//assign variables
int startupDelay = 300; //in seconds
int targetTemp = 78;
int actualTemp;
int tempReading;
int fanTime = 0;
int compressorTime = 0;
int fanStatus = 0;
int compressorStatus = 0;
int airConditionerStatus = 0;
int ledIndicatorStatus = 0;
int maxRunTime = 2; // In hours
int runTime = 0;
int startButtonStatus;
int stopButtonStatus;
int compressorDelay = 5; // In minutes
int fanDelay = 5; // In minutes


void setup() {
    //start serial
    Serial.begin(115200);

    //start Wifi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");  
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    //Set pin mode
    pinMode(wallFan, OUTPUT);
    pinMode(wallCompressor, OUTPUT);
    pinMode(buildingFan, OUTPUT);
    pinMode(buildingCompressor, OUTPUT);
    pinMode(ledIndicator, OUTPUT);
    //pinMode(startButton, INPUT);
    //pinMode(stopButton, INPUT);

    //temperature monitor
    dht.begin();

    //turn off all relays
    digitalWrite(wallFan, HIGH);
    digitalWrite(wallCompressor, HIGH);
    digitalWrite(buildingFan, HIGH);
    digitalWrite(buildingCompressor, HIGH);
    digitalWrite(ledIndicator, LOW);


    Serial.println("start delay");
    //delay to not kill compressor on start up
    for (startupDelay; startupDelay > 0; startupDelay--) {
        Serial.println(startupDelay);
        delay(1000); 
    }
}

void loop() {
    //get temperature
    tempReading = dht.readTemperature(true);
    if (tempReading < 115){
        actualTemp = tempReading;
    }else{
        actualTemp = 0;
    }
    Serial.println("Actual Temp: ");
    Serial.println(actualTemp);
    
    
    //check buttons
    if(startButton.isPressed()){
        startButtonStatus = 1;
    }else{
        startButtonStatus = 0;
    }

    if(stopButton.isPressed()){
        stopButtonStatus = 1;
    }else{
        stopButtonStatus = 0;
    }


    //decriment runtime and set led status
    if (runTime > 0){
        runTime--;
        ledIndicatorStatus = 1;
    }

    //decrement fan time
    if (fanTime > 0){
        fanTime--;
    }

    //decrement compressor time
    if (compressorTime > 0){
        compressorTime--;
    }

    //turn off the compressor and start the timer
    if (0 == compressorTime && 1 == compressorStatus && 0 == airConditionerStatus){
        digitalWrite(wallCompressor, HIGH);
        digitalWrite(buildingCompressor, HIGH);
        compressorStatus = 0;
        compressorTime = (compressorDelay * 30);
        fanTime = (fanDelay *30);
        Serial.println("Compressor OFF");
    }

    //turn off the fan
    if (0 == compressorStatus && 0 == fanTime && 0 == fanStatus && 0 == airConditionerStatus){
        digitalWrite(wallFan, HIGH);
        digitalWrite(buildingFan, HIGH);
        fanStatus = 0;
        Serial.println("Fan OFF");
    }

    //start the shutdown process when the 2 hours is over
    if (0 == runTime){
        ledIndicatorStatus = 0;
        airConditionerStatus = 0;
        Serial.println("Out of Time. Please Insert Coin to Continue");
    }

    //turn on the air conditioner
    if (1 == airConditionerStatus && runTime > 0 && 0 == compressorTime){
        digitalWrite(wallFan, LOW);
        digitalWrite(wallCompressor, LOW);
        digitalWrite(buildingFan, HIGH);
        digitalWrite(buildingCompressor, LOW);
        compressorTime = (compressorDelay * 30);
        fanStatus = 1;
        compressorStatus = 1;
        Serial.println("AC ON");
    }

    //compare temperature
    if (targetTemp < actualTemp){
        if (runTime > 0){
            airConditionerStatus = 1;
        }
    }else{
        airConditionerStatus = 0;
    }

    //check startbutton
    if (1 == startButtonStatus){
        runTime = (maxRunTime * 1800);
    }

    //check stopbutton
    if (1 == stopButtonStatus){
        runTime = 0;
    }

    //LED indicator
    if (1 == ledIndicatorStatus){
        digitalWrite(ledIndicator, HIGH);
    }else{
        digitalWrite(ledIndicator, LOW);
    }

    
    Serial.println("Run Time: ");
    Serial.println(runTime);
    Serial.println("AC Status: ");
    Serial.println(airConditionerStatus);
    Serial.println("Compressor Status: ");
    Serial.println(compressorStatus);
    Serial.println("Compressor Time: ");
    Serial.println(compressorTime);
    Serial.println("Fan Status: ");
    Serial.println(fanStatus);
    Serial.println("Fan Time: ");
    Serial.println(fanTime);
    Serial.println("LED: ");
    Serial.println(ledIndicatorStatus);
    Serial.println("-----------------------------------------------");
    //Delay each loop
    delay(2000);
    
}
